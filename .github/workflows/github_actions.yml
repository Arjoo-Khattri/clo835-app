name: Deploy to ECR
# updated ECR Repo week3-1 01/22
on: 
  pull_request:
    branches:
      - main
    types: 
      - closed

jobs:
  
  build:
    if: github.event.pull_request.merged == true
    name: Build Image
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_MYSQL: webapp-repo
        ECR_REPOSITORY_WEBAPP: mysql-repo
        IMAGE_TAG: v0.1
      run: |
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG -f Dockerfile .

        # push commands
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG

    - name: Setting up key file for ssh connection to EC2
      run: |
        echo "${{ secrets.SSH_KEY_FILE }}" > ./key_file.pem
        chmod 400 ./key_file.pem

    - name: Connect to EC2 instance and Containerize the SQL and Webapp
      run: |
        # Setup SSH key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > assignment1.pem
        chmod 600 assignment1.pem
    
        # SSH and deploy
        ssh -o StrictHostKeyChecking=no -i assignment1.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Configure AWS credentials
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}
          region=us-east-1" > ~/.aws/credentials
          
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 813634909417.dkr.ecr.us-east-1.amazonaws.com
    
          # Remove existing containers and network
          docker rm -f $(docker ps -aq) || true
          docker network rm mynetwork || true
    
          # Create network
          docker network create mynetwork
    
          # Pull latest images
          docker pull 813634909417.dkr.ecr.us-east-1.amazonaws.com/mysql-repo:v1.0
          docker pull 813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
          # Start MySQL container
          docker run -d --name sql --network mynetwork \
            -e MYSQL_ROOT_PASSWORD=my-secret-pw \
            -e MYSQL_DATABASE=mydb \
            -p 3306:3306 \
            813634909417.dkr.ecr.us-east-1.amazonaws.com/mysql-repo:v1.0
    
          echo "Waiting for MySQL to initialize..."
          sleep 30
    
          # Initialize database
          cat > init.sql
          CREATE DATABASE IF NOT EXISTS mydb;
          USE mydb;
          CREATE TABLE IF NOT EXISTS employee (
              emp_id VARCHAR(20) PRIMARY KEY,
              first_name VARCHAR(100),
              last_name VARCHAR(100),
              primary_skill VARCHAR(100),
              location VARCHAR(100)
          );
          
    
          docker cp init.sql sql:/init.sql
          docker exec sql mysql -uroot -pmy-secret-pw < init.sql
    
          # Start webapp containers with different colors
          # Blue container
          docker run -d --name blue-webapp --network mynetwork \
            -e APP_COLOR=blue \
            -e DBHOST=sql \
            -e DBPORT=3306 \
            -e DBUSER=root \
            -e DBPWD=my-secret-pw \
            -e DATABASE=mydb \
            -p 8081:8080 \
            813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
          # Pink container
          docker run -d --name pink-webapp --network mynetwork \
            -e APP_COLOR=pink \
            -e DBHOST=sql \
            -e DBPORT=3306 \
            -e DBUSER=root \
            -e DBPWD=my-secret-pw \
            -e DATABASE=mydb \
            -p 8082:8080 \
            813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
          # Lime container
          docker run -d --name lime-webapp --network mynetwork \
            -e APP_COLOR=lime \
            -e DBHOST=sql \
            -e DBPORT=3306 \
            -e DBUSER=root \
            -e DBPWD=my-secret-pw \
            -e DATABASE=mydb \
            -p 8083:8080 \
            813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
          # Check running containers
          echo "Verifying deployment..."
          docker ps
          EOF
