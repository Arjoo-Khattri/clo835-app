name: Deploy to ECR
# updated ECR Repo week3-1 01/22
on: 
  pull_request:
    branches:
      - main
    types: 
      - closed

jobs:
  
  build:
    if: github.event.pull_request.merged == true
    name: Build Image
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_MYSQL: webapp-repo
        ECR_REPOSITORY_WEBAPP: mysql-repo
        IMAGE_TAG: v0.1
      run: |
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG -f Dockerfile .

        # push commands
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG

    - name: Setting up key file for ssh connection to EC2
      run: |
        echo "${{ secrets.SSH_KEY_FILE }}" > ./key_file.pem
        chmod 400 ./key_file.pem

    - name: Connect to EC2 instance and Containerize the SQL and Webapp
      run: |
        # Create deployment script
        echo '#!/bin/bash
        
        # Configure AWS credentials
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
        aws configure set region us-east-1
    
        # Setup Docker
        sudo yum update -y
        sudo yum install -y docker
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker ec2-user
    
        # Login to ECR
        aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 813634909417.dkr.ecr.us-east-1.amazonaws.com
    
        # Clean up existing containers
        sudo docker rm -f $(sudo docker ps -aq) || true
        sudo docker network rm mynetwork || true
    
        # Create network
        sudo docker network create mynetwork
    
        # Pull images
        sudo docker pull 813634909417.dkr.ecr.us-east-1.amazonaws.com/mysql-repo:v1.0
        sudo docker pull 813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
        # Start MySQL
        sudo docker run -d --name sql --network mynetwork \
          -e MYSQL_ROOT_PASSWORD=my-secret-pw \
          -e MYSQL_DATABASE=mydb \
          -p 3306:3306 \
          813634909417.dkr.ecr.us-east-1.amazonaws.com/mysql-repo:v1.0
    
        sleep 30
    
        # Create init.sql
        cat > /tmp/init.sql << "EOL"
        CREATE DATABASE IF NOT EXISTS mydb;
        USE mydb;
        CREATE TABLE IF NOT EXISTS employee (
            emp_id VARCHAR(20) PRIMARY KEY,
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            primary_skill VARCHAR(100),
            location VARCHAR(100)
        );
        EOL
    
        sudo docker cp /tmp/init.sql sql:/init.sql
        sudo docker exec sql mysql -uroot -pmy-secret-pw < /tmp/init.sql
    
        # Start webapp containers
        sudo docker run -d --name blue-webapp --network mynetwork \
          -e APP_COLOR=blue \
          -e DBHOST=sql \
          -e DBPORT=3306 \
          -e DBUSER=root \
          -e DBPWD=my-secret-pw \
          -e DATABASE=mydb \
          -p 8081:8080 \
          813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
        sudo docker run -d --name pink-webapp --network mynetwork \
          -e APP_COLOR=pink \
          -e DBHOST=sql \
          -e DBPORT=3306 \
          -e DBUSER=root \
          -e DBPWD=my-secret-pw \
          -e DATABASE=mydb \
          -p 8082:8080 \
          813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
        sudo docker run -d --name lime-webapp --network mynetwork \
          -e APP_COLOR=lime \
          -e DBHOST=sql \
          -e DBPORT=3306 \
          -e DBUSER=root \
          -e DBPWD=my-secret-pw \
          -e DATABASE=mydb \
          -p 8083:8080 \
          813634909417.dkr.ecr.us-east-1.amazonaws.com/webapp-repo:v1.0
    
        sudo docker ps' > deploy.sh
    
        # Make script executable
        chmod +x deploy.sh
    
        # Run script on EC2 using AWS SSM
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["$(cat deploy.sh)"]}' \
          --output text
    
        # Wait for deployment
        sleep 60
    
        # Verify deployment
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["docker ps"]}' \
          --output text
